directive @oneOf on INPUT_OBJECT

"""
Input for adding a user to an event
"""
input AddUserToEventInput {
	"""
	The slug of the event to add the user to
	"""
	event: String!
	"""
	The ID of the user to add
	"""
	userId: Int!
}

type AddUserToEventResult {
	"""
	The user that was added to the event
	"""
	user: User
	"""
	The event the user was added to
	"""
	event: String
	"""
	Errors that may have occurred while processing the action
	"""
	userErrors: [UserError!]!
}

"""
Input for adding a user to an organization
"""
input AddUserToOrganizationInput {
	"""
	The ID of the organization to add the user to
	"""
	organizationId: Int!
	"""
	The ID of the user to add
	"""
	userId: Int!
}

type AddUserToOrganizationResult {
	"""
	The user that was added to the organization
	"""
	user: User
	"""
	The organization the user was added to
	"""
	organization: Int
	"""
	Errors that may have occurred while processing the action
	"""
	userErrors: [UserError!]!
}


"""
Input fields for creating an event
"""
input CreateEventInput {
	"""
	A unique slug
	"""
	slug: String!
	"""
	The display name
	"""
	name: String!
	"""
	The organization putting on the event
	"""
	organizationId: Int!
}

type CreateEventResult {
	"""
	The created event
	"""
	event: Event
	"""
	Errors that may have occurred while processing the action
	"""
	userErrors: [UserError!]!
}

"""
Input fields for creating an organization
"""
input CreateOrganizationInput {
	"""
	The display name
	"""
	name: String!
	"""
	Who owns the organization
	"""
	ownerId: Int!
}

type CreateOrganizationResult {
	"""
	The created organization
	"""
	organization: Organization
	"""
	Errors that may have occurred while processing the action
	"""
	userErrors: [UserError!]!
}

"""
Input fields for creating a provider
"""
input CreateProviderInput {
	"""
	A unique slug
	"""
	slug: String!
	"""
	The public-facing display name
	"""
	name: String!
	"""
	The icon to show next to the display name
	"""
	icon: String!
	"""
	The provider-specific configuration
	"""
	config: JSON!
}

type CreateProviderResult {
	"""
	The created authentication provider
	"""
	provider: Provider
	"""
	Errors that may have occurred while processing the action
	"""
	userErrors: [UserError!]!
}

"""
A custom domain the event is accessible at
"""
type CustomDomain {
	"""
	The domain name for the event
	"""
	name: String!
	"""
	When the custom domain was first created
	"""
	createdAt: DateTime!
	"""
	When the custom domain was last updated
	"""
	updatedAt: DateTime!
	"""
	The event that the custom domain is attached to
	"""
	event: Event!
}

"""
Implement the DateTime<Utc> scalar

The input/output is a string in RFC3339 format.
"""
scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339")

type DeleteEventResult {
	"""
	The slug of the deleted event
	"""
	deletedSlug: String
	"""
	Errors that may have occurred while processing the action
	"""
	userErrors: [UserError!]!
}

type DeleteOrganizationResult {
	"""
	The ID of the deleted organization
	"""
	deletedId: Int
	"""
	Errors that may have occurred while processing the action
	"""
	userErrors: [UserError!]!
}

type DeleteProviderResult {
	"""
	The slug of the deleted authentication provider
	"""
	deletedSlug: String
	"""
	Errors that may have occurred while processing the action
	"""
	userErrors: [UserError!]!
}

type DeleteUserResult {
	"""
	The ID of the deleted user
	"""
	deletedId: Int
	"""
	Errors that may have occurred while processing the action
	"""
	userErrors: [UserError!]!
}

"""
An event that is put on
"""
type Event @key(fields: "slug") {
	"""
	The unique slug
	"""
	slug: String!
	"""
	Display name of the event
	"""
	name: String!
	"""
	When write-access expires
	"""
	expiresOn: DateTime!
	"""
	When the event was first created
	"""
	createdAt: DateTime!
	"""
	When the event was last updated
	"""
	updatedAt: DateTime!
	"""
	Whether the event is active
	"""
	active: Boolean!
	"""
	The custom domain for the event
	"""
	customDomain: CustomDomain
	"""
	The organization that owns the event
	"""
	organization: Organization!
}



"""
Maps a user to their authentication provider
"""
type Identity {
	"""
	The provider the identity corresponds to
	"""
	provider: String!
	"""
	The email associated with the identity
	"""
	email: String!
	"""
	When the identity was first created
	"""
	createdAt: DateTime!
	"""
	When the identity was last updated
	"""
	updatedAt: DateTime!
}


scalar JSON

"""
The various GraphQL mutations

To improve readability, the mutation implementations are split into different files, but all
attached to this one struct.
"""
type Mutation {
	"""
	Create a new event
	"""
	createEvent(input: CreateEventInput!): CreateEventResult!
	"""
	Update the details of an event
	"""
	updateEvent(input: UpdateEventInput!): UpdateEventResult!
	"""
	Delete an event
	"""
	deleteEvent(slug: String!): DeleteEventResult!
	"""
	Unlink an authentication provider identity from a user
	"""
	unlinkIdentity(input: UnlinkIdentityInput!): UnlinkIdentityResult!
	"""
	Add a new organization
	"""
	createOrganization(input: CreateOrganizationInput!): CreateOrganizationResult!
	"""
	Update the details of an organization
	"""
	updateOrganization(input: UpdateOrganizationInput!): UpdateOrganizationResult!
	"""
	Transfer the ownership of the organization to a different user
	"""
	transferOrganizationOwnership(input: TransferOrganizationOwnershipInput!): TransferOrganizationOwnershipResult!
	"""
	Delete an organization
	"""
	deleteOrganization(id: Int!): DeleteOrganizationResult!
	"""
	Add a user to an organization
	"""
	addUserToOrganization(input: AddUserToOrganizationInput!): AddUserToOrganizationResult!
	"""
	Remove a user from an organization
	"""
	removeUserFromOrganization(input: RemoveUserFromOrganizationInput!): RemoveUserFromOrganizationResult!
	"""
	Add a user to an event, as a participant
	"""
	addUserToEvent(input: AddUserToEventInput!): AddUserToEventResult!
	"""
	Remove a participant from an event
	"""
	removeUserFromEvent(input: RemoveUserFromEventInput!): RemoveUserFromEventResult!
	"""
	Add a new authentication provider. The provider will be disabled by default.
	"""
	createProvider(input: CreateProviderInput!): CreateProviderResult!
	"""
	Update the details of an authentication provider
	"""
	updateProvider(input: UpdateProviderInput!): UpdateProviderResult!
	"""
	Delete an authentication provider
	"""
	deleteProvider(slug: String!): DeleteProviderResult!
	"""
	Update the details of a user
	"""
	updateUser(input: UpdateUserInput!): UpdateUserResult!
	"""
	Delete a user
	"""
	deleteUser(id: Int!): DeleteUserResult!
}

"""
An organization that puts on events
"""
type Organization @key(fields: "id") {
	"""
	A unique ID
	"""
	id: Int!
	"""
	The name of the organization
	"""
	name: String!
	"""
	URL for the organization's logo
	"""
	logo: String
	"""
	URL for the organization's website
	"""
	website: String
	"""
	When the organization was first created
	"""
	createdAt: DateTime!
	"""
	When the organization was last updated
	"""
	updatedAt: DateTime!
	"""
	All the events owned by the organization
	"""
	events: [Event!]!
	"""
	The owner of the organization
	"""
	owner: User!
}

"""
Maps a user to an organization as an organizer
"""
type Organizer {
	"""
	When the mapping was created
	"""
	createdAt: DateTime!
	"""
	When the mapping was last updated
	"""
	updatedAt: DateTime!
	"""
	The organization the user is part of
	"""
	organization: Organization!
	"""
	The user that is part of the organization
	"""
	user: User!
}

"""
Maps a user to an event as a participant
"""
type Participant {
	"""
	When the mapping was first created
	"""
	createdAt: DateTime!
	"""
	When the mapping was last updated
	"""
	updatedAt: DateTime!
	"""
	The event the user is participating in
	"""
	event: Event!
	"""
	The user associated with the event
	"""
	user: User!
}

"""
Configuration for an authentication provider
"""
type Provider {
	"""
	A unique identifier for the provider
	"""
	slug: String!
	"""
	Whether the provider can be used for authentication
	"""
	enabled: Boolean!
	"""
	The display name
	"""
	name: String!
	"""
	The URL for the provider's icon
	"""
	icon: String!
	"""
	Provider-specific configuration, i.e. implementation kind, OIDC URLs, scopes, etc
	"""
	config: JSON!
	"""
	When the provider was created
	"""
	createdAt: DateTime!
	"""
	WHen the provider was last updated
	"""
	updatedAt: DateTime!
}

type Query {
	"""
	Get all the authentication providers
	"""
	providers: [Provider!]!
	"""
	Get an authentication provider by its slug
	"""
	provider(slug: String!): Provider
	"""
	Get a user by their ID
	"""
	user(by: UserBy!): User
	"""
	Get all the registered organizations
	"""
	organizations: [Organization!]!
	"""
	Get an organization by its ID
	"""
	organization(id: Int): Organization
	"""
	Get all the events being put on
	"""
	events: [Event!]!
	"""
	Get an event by its slug
	"""
	event(slug: String): Event
}

"""
Input for removing a user from an event
"""
input RemoveUserFromEventInput {
	"""
	The slug of the event to remove the user from
	"""
	event: String!
	"""
	The ID of the user to remove
	"""
	userId: Int!
}

type RemoveUserFromEventResult {
	"""
	The ID of the user that was removed from the event
	"""
	removedUserId: Int
	"""
	The event the user was removed from
	"""
	event: String
	"""
	Errors that may have occurred while processing the action
	"""
	userErrors: [UserError!]!
}

"""
Input for removing a user from an organization
"""
input RemoveUserFromOrganizationInput {
	"""
	The ID of the organization to remove the user from
	"""
	organizationId: Int!
	"""
	The ID of the user to remove
	"""
	userId: Int!
}

type RemoveUserFromOrganizationResult {
	"""
	The ID of the user that was removed from the organization
	"""
	removedUserId: Int
	"""
	The organization the user was removed from
	"""
	organization: Int
	"""
	Errors that may have occurred while processing the action
	"""
	userErrors: [UserError!]!
}


"""
Input fields for transferring the ownership of an organization
"""
input TransferOrganizationOwnershipInput {
	"""
	The ID of the organization to transfer ownership of
	"""
	id: Int!
	"""
	The ID of the new organization owner
	"""
	newOwnerId: Int!
}

type TransferOrganizationOwnershipResult {
	"""
	The organization
	"""
	organization: Organization
	"""
	Errors that may have occurred while processing the action
	"""
	userErrors: [UserError!]!
}

"""
Input for unlinking a user's authentication provider identity
"""
input UnlinkIdentityInput {
	"""
	The ID of the user to perform the unlinking on
	"""
	userId: Int!
	"""
	THe provider to unlink
	"""
	provider: String!
}

type UnlinkIdentityResult {
	"""
	The provider that was unlinked
	"""
	unlinkedProvider: String
	"""
	Errors that may have occurred while processing the action
	"""
	userErrors: [UserError!]!
}

"""
Input fields for updating an event
"""
input UpdateEventInput {
	"""
	The slug of the event to update
	"""
	slug: String!
	"""
	The display name
	"""
	name: String
}

type UpdateEventResult {
	"""
	The event
	"""
	event: Event
	"""
	Errors that may have occurred while processing the action
	"""
	userErrors: [UserError!]!
}

"""
Input fields for updating an organization
"""
input UpdateOrganizationInput {
	"""
	The ID of the organization to update
	"""
	id: Int!
	"""
	The display name
	"""
	name: String
	"""
	The URL of the organization's logo
	"""
	logo: String
	"""
	The URL of the organization's website
	"""
	website: String
}

type UpdateOrganizationResult {
	"""
	The organization
	"""
	organization: Organization
	"""
	Errors that may have occurred while processing the action
	"""
	userErrors: [UserError!]!
}

"""
Input fields for updating a provider
"""
input UpdateProviderInput {
	"""
	The slug of the provider to update
	"""
	slug: String!
	"""
	Whether the provider can be used
	"""
	enabled: Boolean
	"""
	The public-facing display name
	"""
	name: String
	"""
	The icon to show next to the display name
	"""
	icon: String
	"""
	The provider-specific configuration
	"""
	config: JSON
}

type UpdateProviderResult {
	"""
	The authentication provider
	"""
	provider: Provider
	"""
	Errors that may have occurred while processing the action
	"""
	userErrors: [UserError!]!
}

"""
Input fields for updating a user
"""
input UpdateUserInput {
	"""
	The ID of the user to update
	"""
	id: Int!
	"""
	The given/first name
	"""
	givenName: String
	"""
	The family/last name
	"""
	familyName: String
	"""
	The primary email as selected by the user
	"""
	primaryEmail: String
	"""
	Whether the user is an administrator
	"""
	isAdmin: Boolean
}

type UpdateUserResult {
	"""
	The user
	"""
	user: User
	"""
	Errors that may have occurred while processing the action
	"""
	userErrors: [UserError!]!
}

"""
A user of the service
"""
type User @key(fields: "id") {
	"""
	A unique ID
	"""
	id: Int!
	"""
	The given/first name
	"""
	givenName: String!
	"""
	The family/last name
	"""
	familyName: String!
	"""
	The primary email as selected by the user
	"""
	primaryEmail: String!
	"""
	Whether the user is an administrator
	"""
	isAdmin: Boolean!
	"""
	When the user was first created
	"""
	createdAt: DateTime!
	"""
	When the user was last updated
	"""
	updatedAt: DateTime!
	"""
	The identities the user can login with
	"""
	identities: [Identity!]!
	"""
	The organizations the user is part of
	"""
	organizations: [Organizer!]!
	"""
	The events the user has joined
	"""
	events: [Participant!]!
}

"""
How to look up a user
"""
input UserBy @oneOf {
	"""
	How to look up a user
	"""
	id: Int
	"""
	How to look up a user
	"""
	primaryEmail: String
}

"""
Represents and error in the input of a mutation
"""
type UserError @shareable {
	"""
	The path to the input field that caused the error
	"""
	field: [String!]!
	"""
	The error message
	"""
	message: String!
}

extend schema @link(
	url: "https://specs.apollo.dev/federation/v2.3",
	import: ["@key", "@tag", "@shareable", "@inaccessible", "@override", "@external", "@provides", "@requires", "@composeDirective", "@interfaceObject"]
)

directive @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
