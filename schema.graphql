directive @oneOf on INPUT_OBJECT


"""
Input fields for creating a provider
"""
input CreateProviderInput {
	"""
	A unique slug
	"""
	slug: String!
	"""
	The public-facing display name
	"""
	name: String!
	"""
	The icon to show next to the display name
	"""
	icon: String!
	"""
	The provider-specific configuration
	"""
	config: JSON!
}

type CreateProviderResult {
	"""
	The created authentication provider
	"""
	provider: Provider
	"""
	Errors that may have occurred while processing the action
	"""
	userErrors: [UserError!]!
}

"""
Implement the DateTime<Utc> scalar

The input/output is a string in RFC3339 format.
"""
scalar DateTime

type DeleteProviderResult {
	"""
	The slug of the deleted authentication provider
	"""
	deletedSlug: String
	"""
	Errors that may have occurred while processing the action
	"""
	userErrors: [UserError!]!
}

type DeleteUserResult {
	"""
	The ID of the deleted user
	"""
	deletedId: Int
	"""
	Errors that may have occurred while processing the action
	"""
	userErrors: [UserError!]!
}




scalar JSON

"""
The various GraphQL mutations

To improve readability, the mutation implementations are split into different files, but all
attached to this one struct.
"""
type Mutation {
	"""
	Add a new authentication provider. The provider will be disabled by default.
	"""
	createProvider(input: CreateProviderInput!): CreateProviderResult!
	"""
	Update the details of an authentication provider
	"""
	updateProvider(input: UpdateProviderInput!): UpdateProviderResult!
	"""
	Delete an authentication provider
	"""
	deleteProvider(slug: String!): DeleteProviderResult!
	"""
	Update the details of a user
	"""
	updateUser(input: UpdateUserInput!): UpdateUserResult!
	"""
	Delete a user
	"""
	deleteUser(id: Int!): DeleteUserResult!
}

"""
Configuration for an authentication provider
"""
type Provider {
	"""
	A unique identifier for the provider
	"""
	slug: String!
	"""
	Whether the provider can be used for authentication
	"""
	enabled: Boolean!
	"""
	The display name
	"""
	name: String!
	"""
	The URL for the provider's icon
	"""
	icon: String!
	"""
	Provider-specific configuration, i.e. implementation kind, OIDC URLs, scopes, etc
	"""
	config: JSON!
	"""
	When the provider was created
	"""
	createdAt: DateTime!
	"""
	WHen the provider was last updated
	"""
	updatedAt: DateTime!
}

type Query {
	"""
	Get all the authentication providers
	"""
	providers: [Provider!]!
	"""
	Get an authentication provider by it's slug
	"""
	provider(slug: String!): Provider
	"""
	Get a user by their ID
	"""
	user(by: UserBy!): User
}


"""
Input fields for updating a provider
"""
input UpdateProviderInput {
	"""
	The slug of the provider to update
	"""
	slug: String!
	"""
	Whether the provider can be used
	"""
	enabled: Boolean
	"""
	The public-facing display name
	"""
	name: String
	"""
	The icon to show next to the display name
	"""
	icon: String
	"""
	The provider-specific configuration
	"""
	config: JSON
}

type UpdateProviderResult {
	"""
	The authentication provider
	"""
	provider: Provider
	"""
	Errors that may have occurred while processing the action
	"""
	userErrors: [UserError!]!
}

"""
Input fields for updating a user
"""
input UpdateUserInput {
	"""
	The ID of the user to update
	"""
	id: Int!
	"""
	The given/first name
	"""
	givenName: String
	"""
	The family/last name
	"""
	familyName: String
	"""
	The primary email as selected by the user
	"""
	primaryEmail: String
	"""
	Whether the user is an administrator
	"""
	isAdmin: Boolean
}

type UpdateUserResult {
	"""
	The user
	"""
	user: User
	"""
	Errors that may have occurred while processing the action
	"""
	userErrors: [UserError!]!
}

"""
A user of the service
"""
type User {
	"""
	A unique ID
	"""
	id: Int!
	"""
	The given/first name
	"""
	givenName: String!
	"""
	The family/last name
	"""
	familyName: String!
	"""
	The primary email as selected by the user
	"""
	primaryEmail: String!
	"""
	Whether the user is an administrator
	"""
	isAdmin: Boolean!
	"""
	When the user was first created
	"""
	createdAt: DateTime!
	"""
	When the user was last updated
	"""
	updatedAt: DateTime!
}

"""
How to lookup a user
"""
input UserBy @oneOf {
	"""
	How to lookup a user
	"""
	id: Int
	"""
	How to lookup a user
	"""
	primaryEmail: String
}

"""
Represents and error in the input of a mutation
"""
type UserError {
	"""
	The path to the input field that caused the error
	"""
	field: [String!]!
	"""
	The error message
	"""
	message: String!
}

schema {
	query: Query
	mutation: Mutation
}
